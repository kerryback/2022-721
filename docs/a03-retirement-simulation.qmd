---
title:  "Retirement Planning Simulation"
author: <br>Kerry Back<br><br>BUSI 721, Fall 2022<br>JGSB, Rice University
output-dir: docs
execute:
  echo: false
  jupyter: python3
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    slide-number: true
    preview-links: true
    self-contained: true
    transition: fade
    theme: [solarized, 721.scss]
    incremental: true
---

## Example

```{.python code-line-numbers="1-6|8-10"}
R = 30*12      # 30 years until retirement
T = 60*12      # 60 total years
g = 0.002      # deposit is 0.2% larger each month
B0 = 100000    # initial balance is $100,000
D1 = 1000      # initial savings is $1,000 (per month)
W = 10000      # withdraw $10,000 per month in retirement

mn = 0.005     # mean monthly return
sd = 0.04      # std dev of monthly return
nsims = 1000   # number of simulated
```



## Distribution of ending balances

```{python}

from scipy.stats import norm
import pandas as pd
import numpy as np
import plotly.express as px

R = 30*12      # 30 years until retirement
T = 60*12      # 60 total years
g = 0.002      # deposit is 0.2% larger each month
B0 = 100000    # initial balance is $100,000
D1 = 1000      # initial savings is $1,000 (per month)
W = 10000      # withdraw $10,000 per month in retirement
mn = 0.005     # mean monthly return
sd = 0.04

nsims = 1000

D = D1 * (1 + g) ** np.arange(R)
r = norm.rvs(loc=mn, scale=sd, size=T*nsims)
r = pd.DataFrame(r.reshape(T, nsims))
fvFactors = (1 + r).cumprod().iloc[-1::-1]
    
FVB = B0 * fvFactors.iloc[0]
FVD = fvFactors.iloc[1:R + 1].multiply(D, axis=0).sum()
FVW = W * fvFactors.iloc[R:T].sum()
BT = FVB + FVD - FVW

fig = px.box(x=BT)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="",
    yaxis_title="",
)
fig.update_layout(font_size=20)
fig.show()
```

## Distribution of ending balances

```{python}

from scipy.stats import norm
import pandas as pd
import numpy as np
import plotly.express as px

R = 30*12      # 30 years until retirement
T = 60*12      # 60 total years
g = 0.002      # deposit is 0.2% larger each month
B0 = 100000    # initial balance is $100,000
D1 = 1000      # initial savings is $1,000 (per month)
W = 10000      # withdraw $10,000 per month in retirement
mn = 0.005     # mean monthly return
sd = 0.04

nsims = 1000

D = D1 * (1 + g) ** np.arange(R)
r = norm.rvs(loc=mn, scale=sd, size=T*nsims)
r = pd.DataFrame(r.reshape(T, nsims))
fvFactors = (1 + r).cumprod().iloc[-1::-1]
    
FVB = B0 * fvFactors.iloc[0]
FVD = fvFactors.iloc[1:R + 1].multiply(D, axis=0).sum()
FVW = W * fvFactors.iloc[R:T].sum()
BT = FVB + FVD - FVW
print(BT.describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9]).iloc[1:].round(2))
```

# 

<p align=center> 
<a href="https://bbcx-investments.com/borrowing-saving/retirement-planning-sim"><img src="images/Rice_Owl.jpg" alt="HTML tutorial" style="width:4in;"></a>
</p>

