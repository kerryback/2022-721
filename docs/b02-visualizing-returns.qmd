---
title:  "Visualizing Returns"
author: <br>Kerry Back<br><br>BUSI 721, Fall 2022<br>JGSB, Rice University
output-dir: docs
execute:
  echo: false
  jupyter: python3
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    slide-number: true
    preview-links: true
    self-contained: true
    transition: fade
    theme: [solarized, 721.scss]
    incremental: true
---

# 

Let's look at the history of stock market returns -- either the U.S. market as a whole or individual stocks or funds.

<p align=center>
![](images/wall-street-stock-exchange-2021-09-04-08-12-31-utc.jpg)
</p>

## Four different plots

- scatter plot of returns by year
- box plot of annual returns
- accumulations $(1+r_1)(1+r_2) \cdots (1+r_n)$ by $n$
- accumulations with log scale


## Box Plot

- Box contains 25th percentile through 75th percentile 

- Median is indicated as a line in the box 
- Fences extend 1.5 times inter-quartile range from 25th and 75th percentiles or to the most extreme observation if that is closer to the box 
    - inter-quartile range = 75th minus 25th percentile)
- Points outside the fences are outliers 
    - if you simulate data from a normal distribution, there will typically be very few points outside the fences

# 

<p align=center> 
<a href="http://bbcx-investments.com/risk/returns"><img src="images/Rice_Owl.jpg" alt="HTML tutorial" style="width:4in;"></a>
</p>


## Why log plots? An Example

  - Let's look at accumulations from two hypothetical stocks. 
    - stock 1: 10% per year 
    - stock 1: 2% per year until 2000 and 10% afterwards
  - It will appear that stock 2 did nothing before 2000 and earned a lot less than stock 1 even after 2000.

## Plot of the Example 

```{python}

import plotly.graph_objects as go
import numpy as np

r1 = np.cumprod([1] + 51*[1.1])
r2 = np.cumprod([1] + 30*[1.02] + 21*[1.1])
years = np.arange(1970, 2022)

trace1 = go.Scatter(
  x=years,
  y=r1,
  mode="lines",
  name="stock 1"
)

trace2 = go.Scatter(
  x=years,
  y=r2,
  mode="lines",
  name="stock 2"
)

fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
string = "year %{x}<br>accum = %{y:.2f}"
fig.update_traces(hovertemplate=string)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="Year",
    yaxis_title="Accumulation",
    yaxis_tickprefix="$", 
    yaxis_tickformat=",.0f",
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.1
    )
)
fig.update_xaxes(title_font_size=24)
fig.update_yaxes(title_font_size=24)
fig.update_layout(font_size=20)
fig.show()

```


## Log (base 10) of accumulation

```{python}
import plotly.graph_objects as go
import numpy as np

r1 = np.log10(np.cumprod([1] + 51*[1.1]))
r2 = np.log10(np.cumprod([1] + 30*[1.02] + 21*[1.1]))
years = np.arange(1970, 2022)

trace1 = go.Scatter(
  x=years,
  y=r1,
  mode="lines",
  name="stock 1"
)

trace2 = go.Scatter(
  x=years,
  y=r2,
  mode="lines",
  name="stock 2"
)

fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
string = "year %{x}<br>log = %{y:.2f}"
fig.update_traces(hovertemplate=string)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="Year",
    yaxis_title="Log of Accumulation",
    yaxis_tickformat=",.1f",
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.1
    )
)
fig.update_xaxes(title_font_size=24)
fig.update_yaxes(title_font_size=24)
fig.update_layout(font_size=20)
fig.show()
```


## Map $y$ tick labels to dollars

```{python}
import plotly.graph_objects as go
import numpy as np

r1 = np.cumprod([1] + 51*[1.1])
r2 = np.cumprod([1] + 30*[1.02] + 21*[1.1])
years = np.arange(1970, 2022)

trace1 = go.Scatter(
  x=years,
  y=r1,
  mode="lines",
  name="stock 1"
)

trace2 = go.Scatter(
  x=years,
  y=r2,
  mode="lines",
  name="stock 2"
)

fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
string = "year %{x}<br>log = %{y:.2f}"
fig.update_traces(hovertemplate=string)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="Year",
    yaxis_title="Accumulation ($)",
    yaxis_tickformat=",.0f",
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.1
    ),
    yaxis = dict(
        tickmode = 'array',
        tickvals = [1, 2, 5, 10, 20, 50, 100],
    )
)
fig.update_xaxes(title_font_size=24)
fig.update_yaxes(title_font_size=24, type="log")
fig.update_layout(font_size=20)
fig.show()
```


# 

<p align=center> 
<a href="https://bbcx-investments.com/risk/returns"><img src="images/Rice_Owl.jpg" alt="HTML tutorial" style="width:4in;"></a>
</p>